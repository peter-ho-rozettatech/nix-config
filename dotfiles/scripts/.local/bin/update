#!/usr/bin/env bash

set -euo pipefail

NIX_CONFIG_PATH="${HOME}/.nix-config"
OS=$(uname -s | tr "[:upper:]" "[:lower:]")
ARCH=$(uname -m)

function pushd() {
    command pushd "$@" > /dev/null
}

function popd() {
    command popd "$@" > /dev/null
}

function tool:config {
    echo "Updating config ..."
    pushd "$NIX_CONFIG_PATH"
    git stash || true
    git pull
    git stash pop || true
    popd
}

function tool:nvim {
    if command -v nvim &> /dev/null; then
        echo "Updating neovim plugins ..."
        nvim --headless "+TSUpdateSync" +qa
        nvim --headless "+Lazy! sync" +qa
        watchman watch-del-all # clear watchman watches for nvim plugins
    fi
}

function tool:nvim:clean {
    if command -v nvim &> /dev/null; then
        echo "Cleaning neovim plugins ..."
        nvim --headless "+Lazy! clean" +qa
    fi
}

function tool:nvim:restore {
    if command -v nvim &> /dev/null; then
        echo "Restoring neovim plugins ..."
        nvim --headless "+Lazy! restore" +qa
    fi
}

function tool:nix {
    echo "Updating nix ..."
    tool:nix:flake
    tool:nix:fetchers
    tool:nix:rebuild
}

function tool:nix:flake {
    echo "Updating flake.lock ..."
    pushd "$NIX_CONFIG_PATH"
    nix flake update
    popd
}

function tool:nix:clean {
    echo "Cleaning user nix store ..."
    nix-collect-garbage --delete-older-than 7d
    echo "Cleaning root nix store ..."
    sudo nix-collect-garbage --delete-older-than 7d
}

function tool:nix:rebuild {
    echo "Rebuilding new nix config ..."

    nix_rebuild_cmd="nixos-rebuild"
    if [[ $OS == "darwin" ]]; then
        nix_rebuild_cmd="darwin-rebuild"
    fi

    sudo $nix_rebuild_cmd switch --flake "$NIX_CONFIG_PATH"
}

function tool:nix:fetchers {
    echo "Updating nix fetchers ..."
    pushd "$NIX_CONFIG_PATH"

    # Run update-nix-fetchgit on all .nix files
    echo "Running update-nix-fetchgit on all .nix files..."
    find pkgs -type f -name "*.nix" -print0 | xargs -0 -I '{}' sh -c 'update-nix-fetchgit {} 2>&1 || true'

    # Get list of files that were changed by update-nix-fetchgit
    changed_files=($(git diff --name-only pkgs/ | grep '\.nix$' || true))

    if [[ ${#changed_files[@]} -gt 0 ]]; then
        echo "Updating hashes for ${#changed_files[@]} changed files..."
        for file in "${changed_files[@]}"; do
            echo "Checking hashes for $file"

            # Try to build the package and capture any hash mismatches
            build_output=$(timeout 120 nix-build -E "with import <nixpkgs> {}; callPackage ./$file {}" 2>&1 || true)

            # Extract hash mismatches and replace them directly
            if echo "$build_output" | grep -q "hash mismatch"; then
                # Extract both specified and got hashes from build output
                specified_hash=$(echo "$build_output" | grep -o "specified:.*sha256-[^']*" | sed 's/specified: *//' | head -1)
                got_hash=$(echo "$build_output" | grep -o "got:.*sha256-[^']*" | sed 's/got: *//' | head -1)

                if [[ -n "$specified_hash" && -n "$got_hash" ]]; then
                    echo "Replacing hash in $file: $specified_hash -> $got_hash"

                    # Use | as delimiter to avoid issues with / and + in hashes
                    # Escape special characters for sed, including the | delimiter
                    specified_escaped=$(echo "$specified_hash" | sed 's/[[\.*^$()+?{|]/\\&/g')
                    got_escaped=$(echo "$got_hash" | sed 's/[[\.*^$()+?{|]/\\&/g')

                    # Replace the specified hash with the got hash using # as delimiter
                    sed -i.bak "s#$specified_escaped#$got_escaped#g" "$file"
                    rm -f "$file.bak"

                    echo "Successfully updated hash in $file"
                else
                    echo "Warning: Could not extract both specified and got hashes from build output for $file"
                    echo "Specified: '$specified_hash'"
                    echo "Got: '$got_hash'"
                fi
            fi        done
    else
        echo "No files were changed by update-nix-fetchgit"
    fi

    popd
}

function tool:brew {
    if command -v brew &> /dev/null; then
        echo "Updating homebrew packages ..."
        brew update
        brew upgrade --greedy
    fi
}

function tool:clean {
    tool:nvim:clean
    tool:nix:clean
}

function tool:restore {
    tool:nvim:restore
    tool:nix:rebuild
    tool:clean
}

function tool:all {
    tool:config
    tool:nvim
    tool:nix
    if [[ $OS == "darwin" ]]; then
        tool:brew
    fi
    tool:clean
}

function tool:list {
    compgen -A function | sed -rn 's/tool:(.*)/\1/p' | cat
}

function tool:help {
    printf "Usage: %s [TOOL] [ARGS]\n\nTools:\n" "$0"

    compgen -A function | sed -rn 's/tool:(.*)/\1/p' | cat -n
}

"tool:${@:-all}"
