#!/usr/bin/env bash

set -euo pipefail

NIX_CONFIG_PATH="${HOME}/.nix-config"

function pushd() {
    command pushd "$@" >/dev/null
}

function popd() {
    command popd "$@" >/dev/null
}

function tool:config {
    echo "Updating config ..."
    pushd "$NIX_CONFIG_PATH"
    git stash || true
    git pull
    git stash pop || true
    popd
}

function tool:nvim {
    if command -v nvim &>/dev/null; then
        echo "Updating neovim plugins ..."
        nvim --headless "+TSUpdateSync" +qa
        nvim --headless "+Lazy! sync" +qa
    fi
}

function tool:nvim:clean {
    if command -v nvim &>/dev/null; then
        echo "Cleaning neovim plugins ..."
        nvim --headless "+Lazy! clean" +qa
    fi
}

function tool:nix {
    echo "Updating nix ..."
    tool:nix:flake
    tool:nix:fetchers
    tool:nix:rebuild
}

function tool:nix:flake {
    echo "Updating flake.lock ..."
    pushd "$NIX_CONFIG_PATH"
    nix flake update
    popd
}

function tool:nix:clean {
    echo "Cleaning nix store ..."
    nix-collect-garbage --delete-older-than 7d
}

function tool:nix:rebuild {
    echo "Rebuilding new nix config ..."
    sudo nixos-rebuild switch --flake "$NIX_CONFIG_PATH"
}

function tool:nix:fetchers {
    echo "Updating nix fetchers ..."
    pushd "$NIX_CONFIG_PATH"
    find home -type f -print0 -name "*.nix" | xargs -0 -I '{}' sh -c 'update-nix-fetchgit {} 2>&1 || true'
    find systems -type f -print0 -name "*.nix" | xargs -0 -I '{}' sh -c 'update-nix-fetchgit {} 2>&1 || true'
    popd
}

function tool:clean {
    tool:nvim:clean
    tool:nix:clean
}

function tool:all {
    tool:config
    tool:nvim
    tool:nix
}

function tool:list {
    compgen -A function | sed -rn 's/tool:(.*)/\1/p' | cat
}

function tool:help {
    printf "Usage: %s [TOOL] [ARGS]\n\nTools:\n" "$0"

    compgen -A function | sed -rn 's/tool:(.*)/\1/p' | cat -n
}

"tool:${@:-all}"
