#!/usr/bin/env bash

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Global variables for system info
ARCH=""
OS=""

# Logging functions
function log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

function log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

function log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

function log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Detect system architecture and OS
function detect_system() {
    ARCH=$(uname -m)
    case "$ARCH" in
        x86_64) ARCH="x86_64" ;;
        aarch64 | arm64) ARCH="aarch64" ;;
        *)
            log_error "Unsupported architecture: $ARCH"
            exit 1
            ;;
    esac

    if [[ $OSTYPE == "linux-gnu"* ]]; then
        if grep -q "Ubuntu" /etc/os-release 2> /dev/null; then
            OS="ubuntu"
        elif grep -q "Debian" /etc/os-release 2> /dev/null; then
            OS="debian"
        elif grep -q "NixOS" /etc/os-release 2> /dev/null; then
            OS="nixos"
        else
            log_error "Unsupported Linux distribution. Only Ubuntu, Debian, and NixOS are supported."
            exit 1
        fi
    elif [[ $OSTYPE == "darwin"* ]]; then
        OS="darwin"
    else
        log_error "Unsupported operating system: $OSTYPE"
        exit 1
    fi
}

# Check if command exists
function command_exists() {
    command -v "$1" > /dev/null 2>&1
}

# Install git on Debian/Ubuntu systems
function install_git() {
    if command_exists git; then
        log_info "Git is already installed"
        return 0
    fi

    if [[ $OS == "ubuntu" || $OS == "debian" ]]; then
        log_info "Installing git on $OS..."
        sudo apt-get update
        sudo apt-get install -y git
        log_success "Git installed successfully"
    fi
}

# Install Nix using Determinate Systems installer
function install_nix() {
    if command_exists nix; then
        log_info "Nix is already installed"
        return 0
    fi

    log_info "Installing Nix using Determinate Systems installer..."
    curl -fsSL https://install.determinate.systems/nix | sh -s -- install

    # Source nix profile
    if [ -f /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh ]; then
        . /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
    fi

    log_success "Nix installed successfully"
}

# Clone the nix-config repository
function clone_config() {
    local config_dir="$HOME/.nix-config"

    if [ -d "$config_dir" ]; then
        log_info "Configuration directory already exists at $config_dir"
        cd "$config_dir"
        if command_exists git && [ -d ".git" ]; then
            log_info "Updating existing repository..."
            git pull origin main || log_warn "Failed to update repository"
        fi
    else
        log_info "Cloning nix-config repository..."
        git clone https://github.com/petertriho/nix-config.git "$config_dir"
        cd "$config_dir"
        log_success "Repository cloned successfully"
    fi
}

# Setup for Ubuntu/Debian systems
function setup_linux_home_manager() {
    local distro="$1"
    log_info "Setting up $distro system..."

    # Install home-manager and apply configuration
    log_info "Installing home-manager configuration..."
    nix run home-manager/master -- switch --flake ~/.nix-config

    log_success "$distro setup completed"
}

# Setup for macOS systems
function setup_darwin() {
    log_info "Setting up macOS system..."

    # Apply nix-darwin configuration
    log_info "Applying nix-darwin configuration..."
    sudo nix run nix-darwin/master#darwin-rebuild switch --flake ~/.nix-config

    log_success "macOS setup completed"
}

# Setup for NixOS systems
function setup_nixos() {
    log_info "Setting up NixOS system..."

    # Apply NixOS configuration
    log_info "Applying NixOS configuration..."
    sudo nixos-rebuild switch --flake ~/.nix-config

    log_success "NixOS setup completed"
}

# Setup GitHub authentication and SSH remote
function setup_github() {
    if command_exists gh; then
        log_info "Setting up GitHub authentication..."
        if ! gh auth status > /dev/null 2>&1; then
            gh auth login
        else
            log_info "Already authenticated with GitHub"
        fi

        # Switch to SSH remote if authenticated
        if gh auth status > /dev/null 2>&1; then
            log_info "Switching to SSH remote..."
            git remote set-url origin git@github.com:petertriho/nix-config.git
            log_success "Switched to SSH remote"
        fi
    else
        log_warn "GitHub CLI not available, skipping GitHub setup"
    fi
}

function main() {
    log_info "Starting Nix configuration bootstrap..."

    detect_system
    log_info "Detected system: ${ARCH}-${OS}"

    install_git

    install_nix

    clone_config

    # Setup based on OS
    case "$OS" in
        ubuntu)
            setup_linux_home_manager "Ubuntu"
            ;;
        debian)
            setup_linux_home_manager "Debian"
            ;;
        darwin)
            setup_darwin
            ;;
        nixos)
            setup_nixos
            ;;
        *)
            log_error "Unsupported system configuration: $OS"
            exit 1
            ;;
    esac

    setup_github

    log_success "Bootstrap completed successfully!"
    log_info "You may need to restart your shell or source your profile to use the new configuration."
}

main "$@"
